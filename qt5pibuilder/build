#!/bin/sh -e

# show in wich line is run the code
set -x

#Variable in the future
QT_VERSION=5.9

# module used to compile Stationpedelec, in the future add qtweb
QT_MODULES="qtxmlpatterns qtdeclarative qtserialport qtquickcontrols"

GCC_VERSION=arm-linux-gnueabihf-
BASEDIR=$PWD
CLEAN=false

# here you can use a frisch raspbian image or your personal sysroot
OPTIONSYS=mysys  
DEVICE="linux-rasp-pi3-g++"
#DEVICE='linux-rasp-pi3-vc4-g++'
COMPILER=/opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
SYSROOT=/mnt/raspbian/rpiSysroot-2018-06-27-raspbian-stretch-lite-updated/sysroot

# get compiler
if [ ! -d /opt/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf ]; then
	wget -c https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz -P /opt
	cd /opt
	unxz gcc-linaro-*.tar.xz
	tar -xvf gcc-linaro-*.tar
	rm gcc-linaro*.tar
	cd $BASEDIR
fi


echo "Getting Sysroot from $OPTIONSYS"


if [ ! -d $SYSROOT ]; then
	sudo mkdir  -p $SYSROOT
fi



if [ "$OPTIONSYS" = "raspbian" ]; then
	cd /tmp
	wget -c https://downloads.raspberrypi.org/raspbian_latest -o raspbian.zip

	unzip raspbian.zip -d /tmp/mysysroot
	cd $BASEDIR

else
	echo "whe are working with a your root system"
	#	git clone git@github.com:tobimeu/velocity-docker-bikeman.git -b first_step_docker
fi




USAGE="$(basename "$0") [-h] [-c] [-d device] -- install toolchain and build qt5 for raspberry pi, automated version of https://wiki.qt.io/RaspberryPi2EGLFS

where:
	-h|--help	show this help text
	-c|--clean	clean all modules to force rebuild
	-d|--device	build for a specific device (defaults to linux-rpi3-g++)
	-ls|--localsys	build with a local system root from linux-rpi3-g++)"

while [ $# -gt 0 ]; do
	key="$1"
		
	case $key in
		-c|--clean)
		CLEAN=true
		shift
		;;
		-d|--device)
		DEVICE="$2"
		shift
		shift
		;;
		-h|--help)
		echo "$USAGE"
		exit
		;;
	    	*)
		echo "$USAGE"
		exit
		;;
	esac
done

# clean old build
if [ "$CLEAN" = true ]; then
	rm -rf $BASEDIR/qt5 $BASEDIR/qt5pi
fi
MAKE_OPTS="-j4"

if [ ! -f sysroot-relativelinks.py ]; then
	wget https://raw.githubusercontent.com/riscv/riscv-poky/master/scripts/sysroot-relativelinks.py
	chmod +x sysroot-relativelinks.py
    ./sysroot-relativelinks.py $SYSROOT
fi
./sysroot-relativelinks.py $SYSROOT


# build qtcore
if [ ! -d qtbase ]; then
	git clone --depth 1 git://code.qt.io/qt/qtbase.git -b $QT_VERSION
fi


cd qtbase
if [ "$CLEAN" = true ]; then
	git clean -d -f -x
fi
./configure -release -opengl es2 -device $DEVICE  -no-use-gold-linker \
-device-option CROSS_COMPILE=$COMPILER \
-sysroot $SYSROOT -opensource -confirm-license -make libs \
-prefix /usr/local/qt5pi -extprefix $BASEDIR/qt5pi -hostprefix $BASEDIR/qt5 -v
make ${MAKE_OPTS}
make install
cd ..

# build qt modules
for MODULE in $QT_MODULES; do
	if [ ! -d $MODULE ]; then
		git clone --depth 1 git://code.qt.io/qt/$MODULE.git -b $QT_VERSION
	fi
	echo entering $MODULE
	cd $MODULE
	if [ "$CLEAN" = true ]; then
		git clean -d -f -x
	fi
	$BASEDIR/qt5/bin/qmake
	make ${MAKE_OPTS}
	make install
	cd ..
done
